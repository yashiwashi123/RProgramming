install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data("iris")
?iris
iris
new <- split(iris, iris$Sepal.Length Species$virginica)
sepal <- iris[iris$Sepal.Length, ]
sepal
iris[, iris$Sepal.Length]
iris<- iris[, iris$Sepal.Length]
iris
sepL <- subset(iris, Species == "virginica")
sepL
str(iris)
tapply( iris, Species == "virginica", mean)
tapply( iris, "virginica", mean)
mean(iris$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data("mtcars")
?mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(tapply(mtcars$mpg, mtcars$cyl, mean))
with(mtcars, tapply(mtcars$mpg, mtcars$cyl, mean))
str(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
82.63636 - 209.21429
debug(ls)
?ls
exit
q
setwd("~/Desktop/RProgramming/Assignment3")
outcome[, 11] <- as.numeric(outcome[, 11])
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[,11])
getwd()
library(best.R)
best("SC", "heart attack")
source(best.R)
load(best)
load(best.R)
getwd()
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
##read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
##selects the corresponding column to the disease
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if (num == "best"){
orderdata[1, 2]
}
else if (num == "worst") {
orderdata[nrow(orderdata), 2]
}
else{
orderdata[num, 2]
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
swirl()
libaray(swirl)
install.packages(swirl)
install.packages("swirl")
library(swirl)
rm(list=ls())
install_from_swirl("R Programming")
swirl()
swirl()
x <-c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my)data <- saomple(c(y,x), 100)
my_data <- saomple(c(y,z), 100)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
print(my>na)
print(my_na)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf- Inf
x
play()
x <-(norm(20), rep(NA, 20))
x <-(rnorm(20), rep(NA, 20))
x <-c(rnorm(20), rep(NA, 20))
x
nxt()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <-c(foo = 11, bard =2, narf = NA)
vect <-c(foo = 11, bar =2, narf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
x
vect
names(vect)
vect2 <- c(11, 2, NA)
vect2 <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == FALSE
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
q
exiy
exit
stop
stop()
exit()
